#!/usr/bin/env bash
# wrapper to use nvim-contained container image
# for more information read the note at the end of the file

WRAPPER_VERSION="0.1"
SDK_IDS="rust-stable,node20"

if ! command -v flatpak &>/dev/null; then
    echo "This wrapper script requires flatpak to be installed"
    exit 1
fi

function generate_cmd() {
    local CMD="flatpak run"

    # remove default permissions
    CMD="$CMD --sandbox"

    # for clipboard access
    CMD="$CMD --socket=wayland --share=ipc"

    # no network by default
    [[ "$NETWORK" == "1" ]] && CMD="$CMD --share=network"

    # use terminfo from host
    CMD="$CMD --filesystem=host-os:ro"
    CMD="$CMD --env=TERMINFO_DIRS=/var/run/host/usr/share/terminfo:/var/run/host/usr/lib/terminfo:/var/run/host/etc/terminfo:/usr/share/terminfo"

    # persist the paths nvim flatpak uses
    CMD="$CMD --persist=data"
    CMD="$CMD --persist=config"
    CMD="$CMD --persist=cache"
    CMD="$CMD --persist=.config"
    CMD="$CMD --persist=.local/data"
    CMD="$CMD --persist=.local/share/nvim"
    CMD="$CMD --persist=.local/cache"

    # if the config is a link then allow access to it
    [[ -L ~/.var/app/io.neovim.nvim/.config/nvim ]] && CMD="$CMD --filesystem=$(readlink ~/.var/app/io.neovim.nvim/.config/nvim)"

    # TODO allowing access to /tmp sounds like a bad idea for security
    # CMD="$CMD --filesystem=/tmp --filesystem=/var/tmp"

    # for some reason this is not set with sandbox
    # this was causing the first run message to always appear on startup
    CMD="$CMD --env=XDG_CONFIG_HOME=$HOME/.config"
    CMD="$CMD --env=XDG_DATA_HOME=$HOME/.local/data"
    CMD="$CMD --env=XDG_STATE_HOME=$HOME/.local/state"
    CMD="$CMD --env=XDG_CACHE_HOME=$HOME/.cache"

    # enable SDKs
    [[ -n "$SDK_IDS" ]] && CMD="$CMD --env=FLATPAK_ENABLE_SDK_EXT=$SDK_IDS"

    CMD="$CMD $* io.neovim.nvim"

    echo "$CMD"
}

POSITIONAL_ARGS=()

NETWORK=0
INSTALL_SDK=0
UPDATE=0
SHELL=0

while [ $# -gt 0 ]; do
    case $1 in
        --network)
            NETWORK=1
            shift
            ;;
        --install-sdk)
            INSTALL_SDK=1
            shift
            ;;
        --update)
            UPDATE=1
            shift
            ;;
        --shell) # this is only for debugging
            SHELL=1
            shift
            ;;
        -h|--help)The remaining arguments are passed to the command that gets run in the sandboxed environment. See the --file-forwarding option for handling of file arguments.
            cat <<EOF
nvim-contained

Wrapper around nvim flatpak, sandboxed with minimal access to
host system, any paths passed are mounted inside container RW

Arguments:
    --network       Allow network access
                    (on by default with --update and --shell)
    --install-sdk   Installs SDKs defined in the wrapper
    --update        Runs ':UpdateAll' command in neovim headless
    --shell         Start a debug shell inside container

All other arguments are passed to neovim

--- nvim help ---
EOF

            # call nvim help
            eval "$(generate_cmd) --help"
            exit 0
            ;;
        -v|--version)
            echo "nvim-contained wrapper version ${WRAPPER_VERSION:?}"

            # call nvim version
            eval "$(generate_cmd) --version"
            exit 0
            ;;
        *)
            # save positional arg
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

# restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

if [[ "$UPDATE" == "1" ]]; then
    # updates require network access
    NETWORK=1

    echo "Updating neovim flatpak"
    exec $(generate_cmd) --headless +"UpdateAll"
elif [[ "$SHELL" == "1" ]]; then
    # allow network when debugging
    NETWORK=1

    echo "Starting debugging shell inside flatpak container"
    exec $(generate_cmd --command=/usr/bin/bash)
elif [[ "$INSTALL_SDK" == "1" ]]; then
    echo "Installing flatpak SDKs"

    # generate a list from sdk names
    ids=""
    for i in ${SDK_IDS/,/ }; do
        ids="$ids org.freedesktop.Sdk.Extension.$i"
    done

    flatpak install -y $ids

    exit 0
fi

# TODO explicitly allow paths passed but atm just open current directory
exec $(generate_cmd --filesystem=$PWD) .

